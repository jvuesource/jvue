//  babel dist/server.js --presets=@babel/preset-env
const fs = require("fs");
const path = require("path");

const resolve = file => {
  const fullpath = path.resolve(__dirname, file);
  console.log("fullpath=>", fullpath);
  return fullpath;
};

let renderer;

// get server html template
// path related to dist forder
const template = fs.readFileSync(resolve("./index.html"), "utf-8");
// console.log(template);

const createRenderer = (bundle, options) => {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return require("vue-server-renderer").createBundleRenderer(
    bundle,
    Object.assign(options, {
      template,
      cache: require("lru-cache")({
        max: 1000,
        maxAge: 1000 * 60 * 15
      }),
      // this is only needed when vue-server-renderer is npm-linked
      // path related to dist forder
      basedir: resolve("./"),
      // recommended for performance
      runInNewContext: false
    })
  );
};

// In production: create server renderer using built server bundle.
// The server bundle is generated by vue-ssr-webpack-plugin.
// path related to dist forder
const bundle = require("./vue-ssr-server-bundle.json");

// The client manifests are optional, but it allows the renderer
// to automatically infer preload/prefetch links and directly add <script>
// tags for any async chunks used during render, avoiding waterfall requests.
// path related to dist forder
const clientManifest = require("./vue-ssr-client-manifest.json");
renderer = createRenderer(bundle, {
  clientManifest
});

console.log("export renderToString promise");
export default context => {
  return renderer.renderToString(context);
};
