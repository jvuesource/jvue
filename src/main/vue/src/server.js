//  babel dist/server.js --presets=@babel/preset-env
const fs = require("fs");
const path = require("path");
const jsdom = require("jsdom");
const { JSDOM } = jsdom;

const resolve = file => {
  const fullpath = path.resolve(__dirname, file);
  console.log("fullpath=>", fullpath);
  return fullpath;
};

let renderer;

// get server html template
// path related to dist forder
const template = fs.readFileSync(resolve("./index.html"), "utf-8");
// console.log(template);

const createRenderer = (bundle, options) => {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return require("vue-server-renderer").createBundleRenderer(
    bundle,
    Object.assign(options, {
      // 不使用服务端生成html，自己处理
      template,
      cache: require("lru-cache")({
        max: 1000,
        maxAge: 1000 * 60 * 15
      }),
      // this is only needed when vue-server-renderer is npm-linked
      // path related to dist forder
      basedir: resolve("./"),
      // recommended for performance
      runInNewContext: false
    })
  );
};

// In production: create server renderer using built server bundle.
// The server bundle is generated by vue-ssr-webpack-plugin.
// path related to dist forder
const bundle = require("./vue-ssr-server-bundle.json");

// The client manifests are optional, but it allows the renderer
// to automatically infer preload/prefetch links and directly add <script>
// tags for any async chunks used during render, avoiding waterfall requests.
// path related to dist forder
const clientManifest = require("./vue-ssr-client-manifest.json");
renderer = createRenderer(bundle, {
  clientManifest
});

/**
 * 渲染服务
 * @param context 上下文
 * @param renderServerCallback 回调
 * @returns {*}
 */
const renderServer = (context, renderServerCallback) => {
  var contextObj = JSON.parse(context);
  var promise = renderer.renderToString(contextObj);
  if (typeof renderServerCallback === "undefined") {
    return promise;
  }
  // 如果有callback，执行callback
  console.log("callback exists,calling callback...");
  promise
    .then((resolve, reject) => {
      if (reject) {
        renderServerCallback(reject);
        return;
      }
      console.log("renderServer resolve=>", resolve);
      // 在dom中查找body
      const dom = new JSDOM(resolve);
      var placeholder = dom.window.document.querySelector("placeholder");
      console.log("renderServer placeholder=>", placeholder.innerHTML);
      renderServerCallback(null, placeholder.innerHTML);
    })
    .catch(rejected => {
      renderServerCallback(rejected);
    });
};

const renderServerProimise = context => {
  return new Promise((resolve, reject) => {
    renderServer(context, function(err, html) {
      console.log("renderServerProimise finish");
      if (err) {
        console.log("renderServerProimise err");
        return reject(err);
      }
      console.log("renderServerProimise get html");
      return resolve(html);
    });
  });
};

module.exports = {
  renderServer,
  renderServerProimise
};
